#!/usr/bin/env node

/**
 * –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞ prokoleso.ua
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
 */

const { checkWebsite, CONFIG } = require('./monitor.js');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, color = 'reset') {
  const timestamp = new Date().toISOString();
  console.log(`${colors[color]}[${timestamp}]${colors.reset} ${message}`);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
function sendAlert(message, type = 'error') {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
  // - Email —á–µ—Ä–µ–∑ nodemailer
  // - Slack webhook
  // - Telegram bot
  // - SMS —á–µ—Ä–µ–∑ Twilio
  
  log(`üö® –ê–õ–ï–†–¢ [${type.toUpperCase()}]: ${message}`, 'red');
  
  // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–∞–π–ª
  const alertFile = 'reports/alerts.log';
  const alertMessage = `[${new Date().toISOString()}] [${type.toUpperCase()}] ${message}\n`;
  fs.appendFileSync(alertFile, alertMessage);
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function analyzeResult(result, history) {
  const alerts = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
  if (!result.success) {
    alerts.push({
      type: 'error',
      message: `–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${result.error}`
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  if (result.success && result.metrics) {
    if (result.metrics.loadComplete > CONFIG.alertThresholds.loadTime) {
      alerts.push({
        type: 'warning',
        message: `–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${result.metrics.loadComplete}ms`
      });
    }
    
    if (result.metrics.responseTime > CONFIG.alertThresholds.responseTime) {
      alerts.push({
        type: 'warning',
        message: `–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${result.metrics.responseTime}ms`
      });
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
  if (history.length >= 5) {
    const recent = history.slice(-5);
    const successRate = recent.filter(r => r.success).length / recent.length;
    
    if (successRate < (1 - CONFIG.alertThresholds.errorRate)) {
      alerts.push({
        type: 'error',
        message: `–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${(successRate * 100).toFixed(1)}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫`
      });
    }
  }
  
  return alerts;
}

// –§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function continuousMonitoring() {
  log('üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', 'blue');
  log(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${CONFIG.interval / 1000} —Å–µ–∫—É–Ω–¥`, 'cyan');
  log(`üìä –û—Ç—á–µ—Ç—ã: ${CONFIG.reportFile}`, 'cyan');
  log('üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C', 'yellow');
  
  let checkCount = 0;
  let lastAlertTime = 0;
  const ALERT_COOLDOWN = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏
  
  const runCheck = async () => {
    checkCount++;
    log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount}`, 'blue');
    
    try {
      const result = await checkWebsite();
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
      let history = [];
      if (fs.existsSync(CONFIG.reportFile)) {
        try {
          history = JSON.parse(fs.readFileSync(CONFIG.reportFile, 'utf8'));
        } catch (err) {
          log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏', 'yellow');
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      history.push(result);
      if (history.length > 100) {
        history = history.slice(-100);
      }
      fs.writeFileSync(CONFIG.reportFile, JSON.stringify(history, null, 2));
      
      // –ê–Ω–∞–ª–∏–∑ –∏ –∞–ª–µ—Ä—Ç—ã
      const alerts = analyzeResult(result, history);
      const now = Date.now();
      
      for (const alert of alerts) {
        if (now - lastAlertTime > ALERT_COOLDOWN) {
          sendAlert(alert.message, alert.type);
          lastAlertTime = now;
        } else {
          log(`‚è≥ –ê–ª–µ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω (cooldown): ${alert.message}`, 'yellow');
        }
      }
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      if (history.length > 0) {
        const successCount = history.filter(r => r.success).length;
        const successRate = (successCount / history.length * 100).toFixed(1);
        log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}% (${successCount}/${history.length})`, 'cyan');
      }
      
    } catch (error) {
      log(`üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`, 'red');
      sendAlert(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`, 'error');
    }
  };
  
  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  await runCheck();
  
  // –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  const intervalId = setInterval(runCheck, CONFIG.interval);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  const cleanup = () => {
    log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...', 'yellow');
    clearInterval(intervalId);
    log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${checkCount}`, 'cyan');
    log(`üìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${CONFIG.reportFile}`, 'cyan');
    process.exit(0);
  };
  
  process.on('SIGINT', cleanup);
  process.on('SIGTERM', cleanup);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
  process.on('uncaughtException', (error) => {
    log(`üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    cleanup();
  });
  
  process.on('unhandledRejection', (reason) => {
    log(`üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${reason}`, 'red');
    cleanup();
  });
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  continuousMonitoring();
}

module.exports = { continuousMonitoring };