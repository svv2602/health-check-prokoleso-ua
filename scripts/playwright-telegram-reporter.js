#!/usr/bin/env node

/**
 * Playwright Reporter —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 * –ê–≤—Ç–æ—Ä: Prokoleso Health Check Team
 * –í–µ—Ä—Å–∏—è: 1.0.0
 */

const fs = require('fs');
const path = require('path');
const TelegramNotifier = require('./telegram-notifier');

class PlaywrightTelegramReporter {
  constructor(options = {}) {
    this.config = options.config || this.loadConfig();
    this.telegramNotifier = null;
    this.testResults = [];
    this.startTime = null;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (this.config.notifications?.telegram?.enabled) {
      this.telegramNotifier = new TelegramNotifier(this.config.notifications.telegram);
    }
  }

  loadConfig() {
    const configPath = path.join(__dirname, '..', 'config', 'monitor.json');
    if (fs.existsSync(configPath)) {
      try {
        return JSON.parse(fs.readFileSync(configPath, 'utf8'));
      } catch (err) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', err.message);
      }
    }
    return {};
  }

  onBegin(config, suite) {
    this.startTime = Date.now();
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏');
    
    if (this.telegramNotifier) {
      console.log('üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã');
    }
  }

  onTestBegin(test, result) {
    console.log(`üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: ${test.title}`);
  }

  onTestEnd(test, result) {
    const testResult = {
      title: test.title,
      status: result.status,
      duration: result.duration,
      error: this.formatError(result.error),
      browser: this.getBrowserName(test),
      url: this.getTestUrl(test),
      timestamp: new Date().toISOString(),
      screenshot: null,
      trace: null
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è
    if (result.status === 'failed' && result.attachments) {
      const screenshot = result.attachments.find(att => att.name === 'screenshot');
      if (screenshot) {
        testResult.screenshot = screenshot.path;
      }
      
      const trace = result.attachments.find(att => att.name === 'trace');
      if (trace) {
        testResult.trace = trace.path;
      }
    }

    this.testResults.push(testResult);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if (result.status === 'failed' && this.telegramNotifier && this.config.notifications.telegram.notifyOnTestFailures) {
      console.log(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${test.title} - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
      this.telegramNotifier.sendTestError(testResult);
    }
  }

  onEnd(result) {
    const endTime = Date.now();
    const duration = endTime - this.startTime;
    
    const summary = {
      totalTests: result.total,
      passed: result.passed,
      failed: result.failed,
      skipped: result.skipped,
      duration: duration,
      timestamp: new Date().toISOString()
    };

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${summary.totalTests}`);
    console.log(`   ‚úÖ –ü—Ä–æ—à–ª–æ: ${summary.passed}`);
    console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${summary.failed}`);
    console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${summary.skipped}`);
    console.log(`   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(duration / 1000)}—Å`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    if (this.telegramNotifier && this.config.notifications.telegram.notifyOnReports) {
      console.log('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Telegram');
      this.telegramNotifier.sendReport(summary);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    this.saveDetailedReport(summary);
  }

  getBrowserName(test) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ—Å—Ç–∞
    if (test.parent && test.parent.project) {
      return test.parent.project.name || 'Unknown';
    }
    return 'Unknown';
  }

  getTestUrl(test) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Ç–µ—Å—Ç–∞
    if (test.title && test.title.includes('prokoleso.ua')) {
      return 'https://prokoleso.ua';
    }
    return 'https://prokoleso.ua';
  }

  saveDetailedReport(summary) {
    const reportDir = path.join(__dirname, '..', 'reports');
    if (!fs.existsSync(reportDir)) {
      fs.mkdirSync(reportDir, { recursive: true });
    }

    const reportPath = path.join(reportDir, 'telegram-test-report.json');
    const detailedReport = {
      summary,
      testResults: this.testResults,
      timestamp: new Date().toISOString()
    };

    fs.writeFileSync(reportPath, JSON.stringify(detailedReport, null, 2));
    console.log(`üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
  async sendCriticalError(error, context = {}) {
    if (!this.telegramNotifier) return;

    const errorInfo = {
      testName: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
      error: error.message || error,
      browser: context.browser || 'System',
      url: context.url || 'https://prokoleso.ua',
      timestamp: new Date().toISOString()
    };

    await this.telegramNotifier.sendTestError(errorInfo);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
  async sendRecoveryNotification() {
    if (!this.telegramNotifier) return;

    const message = `üü¢ <b>–°–ò–°–¢–ï–ú–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê</b>

‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —É—Å–ø–µ—à–Ω–æ
üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

<b>–°—Ç–∞—Ç—É—Å:</b> –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
<b>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç`;

    await this.telegramNotifier.sendMessage(message);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
   * @param {any} error - –û—à–∏–±–∫–∞ (—Å—Ç—Ä–æ–∫–∞, –æ–±—ä–µ–∫—Ç, Error)
   * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
   */
  formatError(error) {
    if (!error) {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞
    if (typeof error === 'string') {
      return error;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Error
    if (error instanceof Error) {
      return `${error.name}: ${error.message}`;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
    if (typeof error === 'object') {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const parts = [];
      
      if (error.message) {
        parts.push(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
      }
      
      if (error.name) {
        parts.push(`–¢–∏–ø: ${error.name}`);
      }
      
      if (error.code) {
        parts.push(`–ö–æ–¥: ${error.code}`);
      }
      
      if (error.status) {
        parts.push(`–°—Ç–∞—Ç—É—Å: ${error.status}`);
      }
      
      if (error.stack) {
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ stack trace
        const stackLines = error.stack.split('\n').slice(0, 3);
        parts.push(`Stack: ${stackLines.join(' ‚Üí ')}`);
      }

      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è JSON.stringify
      if (parts.length === 0) {
        try {
          const jsonStr = JSON.stringify(error, null, 2);
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram
          return jsonStr.length > 1000 ? jsonStr.substring(0, 1000) + '...' : jsonStr;
        } catch (e) {
          return '–û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω';
        }
      }

      return parts.join('\n');
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
    return String(error);
  }
}

module.exports = PlaywrightTelegramReporter;
