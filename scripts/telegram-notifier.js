#!/usr/bin/env node

/**
 * Telegram Notifier –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ê–≤—Ç–æ—Ä: Prokoleso Health Check Team
 * –í–µ—Ä—Å–∏—è: 1.0.0
 */

const axios = require('axios');
const fs = require('fs');
const path = require('path');

class TelegramNotifier {
  constructor(config = {}) {
    this.botToken = config.botToken || process.env.TELEGRAM_BOT_TOKEN;
    this.chatId = config.chatId || process.env.TELEGRAM_CHAT_ID;
    this.enabled = config.enabled !== false && this.botToken && this.chatId;
    
    if (this.enabled) {
      this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
      console.log('‚úÖ Telegram Notifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.log('‚ö†Ô∏è Telegram Notifier –æ—Ç–∫–ª—é—á–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ chat ID');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   */
  async sendMessage(message, options = {}) {
    if (!this.enabled) {
      console.log('üì§ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ—Ç–∫–ª—é—á–µ–Ω–æ):', message);
      return false;
    }

    try {
      const payload = {
        chat_id: this.chatId,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options
      };

      const response = await axios.post(`${this.baseUrl}/sendMessage`, payload);
      
      if (response.data.ok) {
        console.log('‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', response.data);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error.message);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {Object} errorInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  async sendTestError(errorInfo) {
    const {
      testName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç',
      error = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      browser = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä',
      url = 'https://prokoleso.ua',
      timestamp = new Date().toISOString(),
      screenshot = null,
      trace = null
    } = errorInfo;

    const message = this.formatTestErrorMessage({
      testName,
      error,
      browser,
      url,
      timestamp
    });

    const success = await this.sendMessage(message);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (success && screenshot && fs.existsSync(screenshot)) {
      await this.sendScreenshot(screenshot, `–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: ${testName}`);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ trace —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (success && trace && fs.existsSync(trace)) {
      await this.sendTraceFile(trace, `Trace —Ñ–∞–π–ª: ${testName}`);
    }

    return success;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
   * @param {Object} siteInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–π—Ç–µ
   */
  async sendSiteDown(siteInfo) {
    const {
      url = 'https://prokoleso.ua',
      error = '–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      responseTime = 0,
      timestamp = new Date().toISOString()
    } = siteInfo;

    const message = this.formatSiteDownMessage({
      url,
      error,
      responseTime,
      timestamp
    });

    return await this.sendMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
   * @param {Object} performanceInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async sendSlowPerformance(performanceInfo) {
    const {
      url = 'https://prokoleso.ua',
      loadTime = 0,
      threshold = 10000,
      timestamp = new Date().toISOString()
    } = performanceInfo;

    const message = this.formatSlowPerformanceMessage({
      url,
      loadTime,
      threshold,
      timestamp
    });

    return await this.sendMessage(message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
   * @param {string} screenshotPath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
   * @param {string} caption - –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
   */
  async sendScreenshot(screenshotPath, caption = '') {
    if (!this.enabled || !fs.existsSync(screenshotPath)) {
      return false;
    }

    try {
      const formData = new FormData();
      formData.append('chat_id', this.chatId);
      formData.append('photo', fs.createReadStream(screenshotPath));
      if (caption) {
        formData.append('caption', caption);
      }

      const response = await axios.post(`${this.baseUrl}/sendPhoto`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      if (response.data.ok) {
        console.log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', response.data);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error.message);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ trace —Ñ–∞–π–ª–∞
   * @param {string} tracePath - –ü—É—Ç—å –∫ trace —Ñ–∞–π–ª—É
   * @param {string} caption - –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É
   */
  async sendTraceFile(tracePath, caption = '') {
    if (!this.enabled || !fs.existsSync(tracePath)) {
      return false;
    }

    try {
      const formData = new FormData();
      formData.append('chat_id', this.chatId);
      formData.append('document', fs.createReadStream(tracePath));
      if (caption) {
        formData.append('caption', caption);
      }

      const response = await axios.post(`${this.baseUrl}/sendDocument`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      if (response.data.ok) {
        console.log('‚úÖ Trace —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ trace —Ñ–∞–π–ª–∞:', response.data);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ trace —Ñ–∞–π–ª–∞:', error.message);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   * @param {Object} reportInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—á–µ—Ç–µ
   */
  async sendReport(reportInfo) {
    const {
      totalTests = 0,
      passed = 0,
      failed = 0,
      skipped = 0,
      duration = 0,
      timestamp = new Date().toISOString()
    } = reportInfo;

    const message = this.formatReportMessage({
      totalTests,
      passed,
      failed,
      skipped,
      duration,
      timestamp
    });

    return await this.sendMessage(message);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  formatTestErrorMessage({ testName, error, browser, url, timestamp }) {
    const emoji = 'üö®';
    const time = new Date(timestamp).toLocaleString('ru-RU');
    const formattedError = this.formatError(error);
    
    return `${emoji} <b>–û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø</b>

<b>–¢–µ—Å—Ç:</b> ${testName}
<b>–ë—Ä–∞—É–∑–µ—Ä:</b> ${browser}
<b>URL:</b> ${url}
<b>–í—Ä–µ–º—è:</b> ${time}

<b>–û—à–∏–±–∫–∞:</b>
<code>${formattedError}</code>

<b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
   * @param {any} error - –û—à–∏–±–∫–∞ (—Å—Ç—Ä–æ–∫–∞, –æ–±—ä–µ–∫—Ç, Error)
   * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
   */
  formatError(error) {
    if (!error) {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞
    if (typeof error === 'string') {
      return error;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Error
    if (error instanceof Error) {
      return `${error.name}: ${error.message}`;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
    if (typeof error === 'object') {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const parts = [];
      
      if (error.message) {
        parts.push(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
      }
      
      if (error.name) {
        parts.push(`–¢–∏–ø: ${error.name}`);
      }
      
      if (error.code) {
        parts.push(`–ö–æ–¥: ${error.code}`);
      }
      
      if (error.status) {
        parts.push(`–°—Ç–∞—Ç—É—Å: ${error.status}`);
      }
      
      if (error.stack) {
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ stack trace
        const stackLines = error.stack.split('\n').slice(0, 3);
        parts.push(`Stack: ${stackLines.join(' ‚Üí ')}`);
      }

      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è JSON.stringify
      if (parts.length === 0) {
        try {
          const jsonStr = JSON.stringify(error, null, 2);
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram
          return jsonStr.length > 1000 ? jsonStr.substring(0, 1000) + '...' : jsonStr;
        } catch (e) {
          return '–û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω';
        }
      }

      return parts.join('\n');
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
    return String(error);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
   */
  formatSiteDownMessage({ url, error, responseTime, timestamp }) {
    const emoji = 'üî¥';
    const time = new Date(timestamp).toLocaleString('ru-RU');
    const formattedError = this.formatError(error);
    
    return `${emoji} <b>–°–ê–ô–¢ –ù–ï–î–û–°–¢–£–ü–ï–ù</b>

<b>URL:</b> ${url}
<b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> ${responseTime}–º—Å
<b>–í—Ä–µ–º—è:</b> ${time}

<b>–û—à–∏–±–∫–∞:</b>
<code>${formattedError}</code>

<b>–°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å DNS
‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  formatSlowPerformanceMessage({ url, loadTime, threshold, timestamp }) {
    const emoji = 'üêå';
    const time = new Date(timestamp).toLocaleString('ru-RU');
    const percentage = Math.round((loadTime / threshold) * 100);
    
    return `${emoji} <b>–ú–ï–î–õ–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê</b>

<b>URL:</b> ${url}
<b>–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:</b> ${loadTime}–º—Å (${percentage}% –æ—Ç –ª–∏–º–∏—Ç–∞)
<b>–õ–∏–º–∏—Ç:</b> ${threshold}–º—Å
<b>–í—Ä–µ–º—è:</b> ${time}

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å CDN`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  formatReportMessage({ totalTests, passed, failed, skipped, duration, timestamp }) {
    const emoji = failed > 0 ? '‚ö†Ô∏è' : '‚úÖ';
    const time = new Date(timestamp).toLocaleString('ru-RU');
    const successRate = totalTests > 0 ? Math.round((passed / totalTests) * 100) : 0;
    
    return `${emoji} <b>–û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò</b>

<b>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</b> ${totalTests}
<b>‚úÖ –ü—Ä–æ—à–ª–æ:</b> ${passed}
<b>‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ:</b> ${failed}
<b>‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ:</b> ${skipped}
<b>üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> ${successRate}%
<b>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${Math.round(duration / 1000)}—Å
<b>üïê –í—Ä–µ–º—è:</b> ${time}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
   */
  async checkBotStatus() {
    if (!this.enabled) {
      return { status: 'disabled', message: 'Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã' };
    }

    try {
      const response = await axios.get(`${this.baseUrl}/getMe`);
      
      if (response.data.ok) {
        const botInfo = response.data.result;
        return {
          status: 'ok',
          message: `–ë–æ—Ç @${botInfo.username} –∞–∫—Ç–∏–≤–µ–Ω`,
          botInfo
        };
      } else {
        return {
          status: 'error',
          message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ'
        };
      }
    } catch (error) {
      return {
        status: 'error',
        message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: ${error.message}`
      };
    }
  }
}

module.exports = TelegramNotifier;
