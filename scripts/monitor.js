#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ prokoleso.ua
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
 */

const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  url: 'https://prokoleso.ua',
  timeout: 30000,
  retries: 3,
  interval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  reportFile: 'reports/monitor-report.json',
  alertThresholds: {
    loadTime: 10000, // 10 —Å–µ–∫—É–Ω–¥
    responseTime: 5000, // 5 —Å–µ–∫—É–Ω–¥
    errorRate: 0.1 // 10%
  }
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, color = 'reset') {
  const timestamp = new Date().toISOString();
  console.log(`${colors[color]}[${timestamp}]${colors.reset} ${message}`);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞
async function checkWebsite() {
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();
  
  const startTime = Date.now();
  let success = false;
  let error = null;
  let metrics = {};
  
  try {
    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ prokoleso.ua...', 'blue');
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
    const response = await page.goto(CONFIG.url, { 
      waitUntil: 'networkidle',
      timeout: CONFIG.timeout 
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
    if (response.status() !== 200) {
      throw new Error(`HTTP ${response.status()}: ${response.statusText()}`);
    }
    
    // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    metrics = await page.evaluate(() => {
      const navigation = performance.getEntriesByType('navigation')[0];
      const paintEntries = performance.getEntriesByType('paint');
      
      return {
        domContentLoaded: navigation.domContentLoadedEventEnd - navigation.navigationStart,
        loadComplete: navigation.loadEventEnd - navigation.navigationStart,
        firstPaint: paintEntries.find(entry => entry.name === 'first-paint')?.startTime || 0,
        firstContentfulPaint: paintEntries.find(entry => entry.name === 'first-contentful-paint')?.startTime || 0,
        responseTime: navigation.responseEnd - navigation.requestStart,
        transferSize: navigation.transferSize,
        domSize: document.documentElement.outerHTML.length
      };
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    const consoleErrors = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
      }
    });
    
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const bodyVisible = await page.locator('body').isVisible();
    const title = await page.title();
    
    if (!bodyVisible) {
      throw new Error('–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    
    if (!title || title.length === 0) {
      throw new Error('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
    
    success = true;
    
    log(`‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω`, 'green');
    log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}`, 'cyan');
    log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${metrics.loadComplete}ms`, 'cyan');
    log(`üé® First Paint: ${metrics.firstPaint}ms`, 'cyan');
    log(`üìä –†–∞–∑–º–µ—Ä DOM: ${Math.round(metrics.domSize / 1024)}KB`, 'cyan');
    
    if (consoleErrors.length > 0) {
      log(`‚ö†Ô∏è –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏: ${consoleErrors.length}`, 'yellow');
      consoleErrors.forEach(error => log(`   - ${error}`, 'yellow'));
    }
    
  } catch (err) {
    error = err.message;
    log(`‚ùå –û—à–∏–±–∫–∞: ${error}`, 'red');
  } finally {
    await browser.close();
  }
  
  const endTime = Date.now();
  const totalTime = endTime - startTime;
  
  return {
    timestamp: new Date().toISOString(),
    success,
    error,
    totalTime,
    metrics,
    url: CONFIG.url
  };
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
function saveReport(result) {
  const reportPath = path.dirname(CONFIG.reportFile);
  if (!fs.existsSync(reportPath)) {
    fs.mkdirSync(reportPath, { recursive: true });
  }
  
  let report = [];
  if (fs.existsSync(CONFIG.reportFile)) {
    try {
      report = JSON.parse(fs.readFileSync(CONFIG.reportFile, 'utf8'));
    } catch (err) {
      log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π', 'yellow');
    }
  }
  
  report.push(result);
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç—á–µ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π)
  if (report.length > 100) {
    report = report.slice(-100);
  }
  
  fs.writeFileSync(CONFIG.reportFile, JSON.stringify(report, null, 2));
  log(`üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${CONFIG.reportFile}`, 'blue');
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
function analyzeTrends(report) {
  if (report.length < 5) return;
  
  const recent = report.slice(-5);
  const successRate = recent.filter(r => r.success).length / recent.length;
  const avgLoadTime = recent
    .filter(r => r.success && r.metrics)
    .reduce((sum, r) => sum + r.metrics.loadComplete, 0) / recent.length;
  
  log(`üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤:`, 'blue');
  log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${(successRate * 100).toFixed(1)}%`, 'cyan');
  log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${Math.round(avgLoadTime)}ms`, 'cyan');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  if (successRate < 0.9) {
    log(`üö® –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (${(successRate * 100).toFixed(1)}%)`, 'red');
  }
  
  if (avgLoadTime > CONFIG.alertThresholds.loadTime) {
    log(`üö® –í–ù–ò–ú–ê–ù–ò–ï: –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (${Math.round(avgLoadTime)}ms)`, 'red');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ prokoleso.ua', 'blue');
  log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`, 'blue');
  log(`   URL: ${CONFIG.url}`, 'cyan');
  log(`   –¢–∞–π–º–∞—É—Ç: ${CONFIG.timeout}ms`, 'cyan');
  log(`   –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${CONFIG.interval / 1000}—Å`, 'cyan');
  
  try {
    const result = await checkWebsite();
    saveReport(result);
    
    // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è
    if (fs.existsSync(CONFIG.reportFile)) {
      const report = JSON.parse(fs.readFileSync(CONFIG.reportFile, 'utf8'));
      analyzeTrends(report);
    }
    
    // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
    process.exit(result.success ? 0 : 1);
    
  } catch (error) {
    log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => {
  log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...', 'yellow');
  process.exit(0);
});

process.on('SIGTERM', () => {
  log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...', 'yellow');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { checkWebsite, CONFIG };