#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ê–≤—Ç–æ—Ä: Prokoleso Health Check Team
 * –í–µ—Ä—Å–∏—è: 1.0.0
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

class TelegramSetup {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    this.configPath = path.join(__dirname, '..', 'config', 'monitor.json');
    this.envPath = path.join(__dirname, '..', '.env');
  }

  async run() {
    console.log('ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      if (!fs.existsSync(this.configPath)) {
        console.error('‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', this.configPath);
        process.exit(1);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const config = JSON.parse(fs.readFileSync(this.configPath, 'utf8'));
      
      console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram –±–æ—Ç–∞:\n');
      console.log('1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram');
      console.log('2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
      console.log('3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ chat ID');
      console.log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–æ—Ç–∞\n');

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
      const botToken = await this.askQuestion('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ');
      if (!botToken) {
        console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      const botInfo = await this.verifyBotToken(botToken);
      if (!botInfo) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
        return;
      }

      console.log(`‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @${botInfo.username} (${botInfo.first_name})`);

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º chat ID
      const chatId = await this.askQuestion('–í–≤–µ–¥–∏—Ç–µ chat ID (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è): ');
      let finalChatId = chatId;

      if (!chatId) {
        console.log('\nüîç –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è chat ID...');
        finalChatId = await this.detectChatId(botToken);
      }

      if (!finalChatId) {
        console.log('‚ö†Ô∏è Chat ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é –ø–æ–∑–∂–µ.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º chat ID
      const chatInfo = await this.verifyChatId(botToken, finalChatId);
      if (chatInfo) {
        console.log(`‚úÖ Chat –Ω–∞–π–¥–µ–Ω: ${chatInfo.title || chatInfo.first_name || '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç'}`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      config.notifications.telegram.botToken = botToken;
      config.notifications.telegram.chatId = finalChatId;
      config.notifications.telegram.enabled = true;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      fs.writeFileSync(this.configPath, JSON.stringify(config, null, 2));
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

      // –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
      await this.createEnvFile(botToken, finalChatId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sendTest = await this.askQuestion('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ? (y/n): ');
      if (sendTest.toLowerCase() === 'y' || sendTest.toLowerCase() === 'yes') {
        await this.sendTestMessage(botToken, finalChatId);
      }

      console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      console.log('üìù –¢–æ–∫–µ–Ω –±–æ—Ç–∞:', botToken);
      console.log('üí¨ Chat ID:', finalChatId);
      console.log('üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:', this.configPath);
      console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:', this.envPath);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
    } finally {
      this.rl.close();
    }
  }

  async askQuestion(question) {
    return new Promise((resolve) => {
      this.rl.question(question, (answer) => {
        resolve(answer.trim());
      });
    });
  }

  async verifyBotToken(token) {
    try {
      const response = await axios.get(`https://api.telegram.org/bot${token}/getMe`);
      return response.data.ok ? response.data.result : null;
    } catch (error) {
      return null;
    }
  }

  async detectChatId(token) {
    try {
      console.log('üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É @' + (await this.verifyBotToken(token))?.username);
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è... (30 —Å–µ–∫—É–Ω–¥)');
      
      const startTime = Date.now();
      const timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
      
      while (Date.now() - startTime < timeout) {
        const updates = await this.getUpdates(token);
        if (updates.length > 0) {
          const chatId = updates[updates.length - 1].message.chat.id;
          console.log(`‚úÖ Chat ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ${chatId}`);
          return chatId.toString();
        }
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ');
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è chat ID:', error.message);
      return null;
    }
  }

  async getUpdates(token) {
    try {
      const response = await axios.get(`https://api.telegram.org/bot${token}/getUpdates`);
      return response.data.ok ? response.data.result : [];
    } catch (error) {
      return [];
    }
  }

  async verifyChatId(token, chatId) {
    try {
      const response = await axios.get(`https://api.telegram.org/bot${token}/getChat?chat_id=${chatId}`);
      return response.data.ok ? response.data.result : null;
    } catch (error) {
      return null;
    }
  }

  async createEnvFile(botToken, chatId) {
    const envContent = `# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=${botToken}
TELEGRAM_CHAT_ID=${chatId}

# Prokoleso Health Check Configuration
PROKOLESO_URL=https://prokoleso.ua
MONITOR_INTERVAL=300000
HEADLESS=true
TIMEOUT=30000

# Notification Settings
NOTIFY_ON_ERRORS=true
NOTIFY_ON_SITE_DOWN=true
NOTIFY_ON_SLOW_PERFORMANCE=true
NOTIFY_ON_TEST_FAILURES=true
`;

    fs.writeFileSync(this.envPath, envContent);
    console.log('‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω');
  }

  async sendTestMessage(token, chatId) {
    try {
      const message = `ü§ñ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ë–æ—Ç: @${(await this.verifyBotToken(token))?.username}
‚Ä¢ Chat ID: ${chatId}
‚Ä¢ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ê–ª–µ—Ä—Ç—ã –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
‚Ä¢ –û—Ç—á–µ—Ç—ã –æ –º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ trace —Ñ–∞–π–ª–æ–≤

üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!`;

      const response = await axios.post(`https://api.telegram.org/bot${token}/sendMessage`, {
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      });

      if (response.data.ok) {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } else {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const setup = new TelegramSetup();
  setup.run().catch(console.error);
}

module.exports = TelegramSetup;
