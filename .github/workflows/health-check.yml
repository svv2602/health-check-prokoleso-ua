name: Prokoleso Health Check

on:
  # Запуск по расписанию (каждые 6 часов)
  schedule:
    - cron: '0 */6 * * *'
  
  # Ручной запуск
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Тип тестирования'
        required: true
        default: 'health'
        type: choice
        options:
          - health
          - specific
          - all
      browser:
        description: 'Браузер для тестирования'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all
      environment:
        description: 'Окружение'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  
  # Запуск при push в main ветку
  push:
    branches: [ main ]
  
  # Запуск при создании pull request
  pull_request:
    branches: [ main ]

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # Тестирование в разных браузерах
        browser: [chromium, firefox, webkit]
        # Тестирование на разных устройствах
        device: [desktop, mobile]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run health checks
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.test_type }}" = "all" ]; then
              npm run test:all
            elif [ "${{ github.event.inputs.test_type }}" = "specific" ]; then
              npm run test:specific
            else
              npm run test:health
            fi
          else
            npm run test:health
          fi
        env:
          BROWSER: ${{ matrix.browser }}
          DEVICE: ${{ matrix.device }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}-${{ matrix.device }}
          path: |
            reports/
            test-results/
          retention-days: 30
      
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}-${{ matrix.device }}
          path: test-results/
          retention-days: 7
      
      - name: Upload videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: videos-${{ matrix.browser }}-${{ matrix.device }}
          path: test-results/
          retention-days: 7

  performance-check:
    runs-on: ubuntu-latest
    needs: health-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run performance tests
        run: |
          # Создаем кастомный тест для производительности
          cat > tests/performance.spec.ts << 'EOF'
          import { test, expect } from '@playwright/test';
          
          test.describe('Performance Tests', () => {
            test('Page load performance', async ({ page }) => {
              await page.goto('https://prokoleso.ua');
              
              const metrics = await page.evaluate(() => {
                const navigation = performance.getEntriesByType('navigation')[0];
                return {
                  loadTime: navigation.loadEventEnd - navigation.navigationStart,
                  domContentLoaded: navigation.domContentLoadedEventEnd - navigation.navigationStart,
                  firstPaint: performance.getEntriesByName('first-paint')[0]?.startTime || 0,
                  firstContentfulPaint: performance.getEntriesByName('first-contentful-paint')[0]?.startTime || 0
                };
              });
              
              // Проверяем производительность
              expect(metrics.loadTime).toBeLessThan(10000);
              expect(metrics.domContentLoaded).toBeLessThan(5000);
              expect(metrics.firstContentfulPaint).toBeLessThan(3000);
            });
          });
          EOF
          
          npx playwright test tests/performance.spec.ts --project=chromium
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: reports/
          retention-days: 30

  security-check:
    runs-on: ubuntu-latest
    needs: health-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run security tests
        run: |
          # Создаем тест безопасности
          cat > tests/security.spec.ts << 'EOF'
          import { test, expect } from '@playwright/test';
          
          test.describe('Security Tests', () => {
            test('HTTPS enforcement', async ({ page }) => {
              const response = await page.goto('https://prokoleso.ua');
              expect(response?.status()).toBe(200);
              expect(page.url()).toMatch(/^https:/);
            });
            
            test('Security headers', async ({ page }) => {
              const response = await page.goto('https://prokoleso.ua');
              const headers = response?.headers();
              
              // Проверяем наличие важных заголовков безопасности
              expect(headers?.['strict-transport-security']).toBeTruthy();
              expect(headers?.['x-frame-options']).toBeTruthy();
              expect(headers?.['x-content-type-options']).toBeTruthy();
            });
          });
          EOF
          
          npx playwright test tests/security.spec.ts --project=chromium
      
      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: reports/
          retention-days: 30

  accessibility-check:
    runs-on: ubuntu-latest
    needs: health-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run accessibility tests
        run: |
          # Создаем тест доступности
          cat > tests/accessibility.spec.ts << 'EOF'
          import { test, expect } from '@playwright/test';
          
          test.describe('Accessibility Tests', () => {
            test('Page accessibility', async ({ page }) => {
              await page.goto('https://prokoleso.ua');
              
              // Проверяем наличие alt атрибутов у изображений
              const images = page.locator('img');
              const imageCount = await images.count();
              
              for (let i = 0; i < imageCount; i++) {
                const img = images.nth(i);
                const alt = await img.getAttribute('alt');
                expect(alt).toBeTruthy();
              }
              
              // Проверяем наличие заголовков
              const headings = page.locator('h1, h2, h3, h4, h5, h6');
              const headingCount = await headings.count();
              expect(headingCount).toBeGreaterThan(0);
              
              // Проверяем наличие h1
              const h1Count = await page.locator('h1').count();
              expect(h1Count).toBeGreaterThan(0);
            });
          });
          EOF
          
          npx playwright test tests/accessibility.spec.ts --project=chromium
      
      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: reports/
          retention-days: 30

  notification:
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, security-check, accessibility-check]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate summary report
        run: |
          # Создаем сводный отчет
          cat > reports/summary.md << 'EOF'
          # Prokoleso Health Check Report
          
          ## Test Results Summary
          
          - **Health Check**: ${{ needs.health-check.result }}
          - **Performance Check**: ${{ needs.performance-check.result }}
          - **Security Check**: ${{ needs.security-check.result }}
          - **Accessibility Check**: ${{ needs.accessibility-check.result }}
          
          ## Artifacts
          
          - Test Results: Available in artifacts
          - Screenshots: Available for failed tests
          - Videos: Available for failed tests
          
          ## Next Steps
          
          If any tests failed, please check the detailed reports in the artifacts.
          EOF
      
      - name: Upload summary report
        uses: actions/upload-artifact@v4
        with:
          name: summary-report
          path: reports/summary.md
          retention-days: 30
      
      # Здесь можно добавить отправку уведомлений в Slack, Email, Telegram и т.д.
      - name: Send notification
        if: failure()
        run: |
          echo "Some tests failed. Check the artifacts for details."
          # Здесь можно добавить отправку уведомлений