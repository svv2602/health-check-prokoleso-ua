import { test, expect } from '@playwright/test';

/**
 * –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Å–∞–π—Ç–∞ prokoleso.ua
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ä–∑–∏–Ω—É, —Ñ–æ—Ä–º—ã –∏ –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */
test.describe('Prokoleso.ua - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', () => {
  const BASE_URL = 'https://prokoleso.ua';
  
  test('–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω', async ({ page }) => {
    console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
    
    await page.goto(BASE_URL);
    
    // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥
    const catalogSelectors = [
      'a[href*="catalog"]',
      'a[href*="–∫–∞—Ç–∞–ª–æ–≥"]',
      'a[href*="—Ç–æ–≤–∞—Ä—ã"]',
      'a[href*="products"]',
      'a[href*="shop"]',
      '.catalog',
      '.products',
      '.shop'
    ];
    
    let catalogFound = false;
    for (const selector of catalogSelectors) {
      const catalogLink = page.locator(selector);
      if (await catalogLink.count() > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥: ${selector}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
        await expect(catalogLink.first()).toBeVisible();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ
        await catalogLink.first().click();
        await page.waitForLoadState('networkidle');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        await expect(page.locator('body')).toBeVisible();
        
        catalogFound = true;
        console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        break;
      }
    }
    
    if (!catalogFound) {
      console.log('‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  });

  test('–ö–æ—Ä–∑–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç', async ({ page }) => {
    console.log('üõí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...');
    
    await page.goto(BASE_URL);
    
    // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
    const cartSelectors = [
      'a[href*="cart"]',
      'a[href*="–∫–æ—Ä–∑–∏–Ω–∞"]',
      'a[href*="basket"]',
      '.cart',
      '.basket',
      '.shopping-cart',
      '[aria-label*="–∫–æ—Ä–∑–∏–Ω–∞"]',
      '[aria-label*="cart"]'
    ];
    
    let cartFound = false;
    for (const selector of cartSelectors) {
      const cartButton = page.locator(selector);
      if (await cartButton.count() > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ—Ä–∑–∏–Ω–∞: ${selector}`);
        
        await expect(cartButton.first()).toBeVisible();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        await cartButton.first().click();
        await page.waitForLoadState('networkidle');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        await expect(page.locator('body')).toBeVisible();
        
        cartFound = true;
        console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        break;
      }
    }
    
    if (!cartFound) {
      console.log('‚ö†Ô∏è –ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  });

  test('–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏', async ({ page }) => {
    console.log('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...');
    
    await page.goto(BASE_URL);
    
    // –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const formSelectors = [
      'form',
      '.contact-form',
      '.feedback-form',
      '.contact',
      '.feedback',
      '[action*="contact"]',
      '[action*="feedback"]'
    ];
    
    let formFound = false;
    for (const selector of formSelectors) {
      const form = page.locator(selector);
      if (await form.count() > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞: ${selector}`);
        
        await expect(form.first()).toBeVisible();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        const inputs = form.locator('input, textarea, select');
        const inputCount = await inputs.count();
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞: ${inputCount}`);
        
        if (inputCount > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã
          for (let i = 0; i < Math.min(inputCount, 3); i++) {
            const input = inputs.nth(i);
            await expect(input).toBeVisible();
          }
        }
        
        formFound = true;
        break;
      }
    }
    
    if (!formFound) {
      console.log('‚ö†Ô∏è –§–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  });

  test('–§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤', async ({ page }) => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏...');
    
    await page.goto(BASE_URL);
    
    // –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const productPageSelectors = [
      'a[href*="catalog"]',
      'a[href*="—Ç–æ–≤–∞—Ä—ã"]',
      'a[href*="products"]'
    ];
    
    let productPageFound = false;
    for (const selector of productPageSelectors) {
      const link = page.locator(selector);
      if (await link.count() > 0) {
        await link.first().click();
        await page.waitForLoadState('networkidle');
        productPageFound = true;
        break;
      }
    }
    
    if (productPageFound) {
      // –ü–æ–∏—Å–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const filterSelectors = [
        '.filter',
        '.filters',
        '.sort',
        '.sorting',
        'select[name*="sort"]',
        'select[name*="filter"]',
        '[class*="filter"]',
        '[class*="sort"]'
      ];
      
      let filtersFound = false;
      for (const selector of filterSelectors) {
        const filter = page.locator(selector);
        if (await filter.count() > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: ${selector}`);
          await expect(filter.first()).toBeVisible();
          filtersFound = true;
          break;
        }
      }
      
      if (!filtersFound) {
        console.log('‚ö†Ô∏è –§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } else {
      console.log('‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  });

  test('–ü–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É', async ({ page }) => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∞–π—Ç—É...');
    
    await page.goto(BASE_URL);
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
    const searchSelectors = [
      'input[type="search"]',
      'input[placeholder*="–ø–æ–∏—Å–∫"]',
      'input[placeholder*="search"]',
      'input[name*="search"]',
      '.search input',
      '#search'
    ];
    
    let searchInput = null;
    for (const selector of searchSelectors) {
      const input = page.locator(selector);
      if (await input.count() > 0) {
        searchInput = input.first();
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞: ${selector}`);
        break;
      }
    }
    
    if (searchInput) {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const searchQueries = ['—à–∏–Ω—ã', '–¥–∏—Å–∫–∏', '–º–∞—Å–ª–æ', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä'];
      
      for (const query of searchQueries) {
        console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫: "${query}"`);
        
        await searchInput.fill(query);
        await searchInput.press('Enter');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await page.waitForLoadState('networkidle');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        await expect(page.locator('body')).toBeVisible();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        await page.goto(BASE_URL);
        await page.waitForLoadState('networkidle');
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å–Ω–æ–≤–∞
        for (const selector of searchSelectors) {
          const input = page.locator(selector);
          if (await input.count() > 0) {
            searchInput = input.first();
            break;
          }
        }
      }
      
      console.log('‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  });

  test('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã', async ({ page }) => {
    console.log('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...');
    
    await page.goto(BASE_URL);
    
    // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    const socialSelectors = [
      'a[href*="facebook"]',
      'a[href*="instagram"]',
      'a[href*="telegram"]',
      'a[href*="viber"]',
      'a[href*="whatsapp"]',
      'a[href*="youtube"]',
      '.social',
      '.social-links'
    ];
    
    let socialLinksFound = 0;
    for (const selector of socialSelectors) {
      const links = page.locator(selector);
      const count = await links.count();
      if (count > 0) {
        socialLinksFound += count;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (${selector}): ${count}`);
      }
    }
    
    console.log(`üì± –í—Å–µ–≥–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${socialLinksFound}`);
    
    // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const contactSelectors = [
      'text=/—Ç–µ–ª–µ—Ñ–æ–Ω|phone/i',
      'text=/email|–ø–æ—á—Ç–∞/i',
      'text=/–∞–¥—Ä–µ—Å|address/i',
      '.phone',
      '.email',
      '.address',
      '.contact'
    ];
    
    let contactInfoFound = 0;
    for (const selector of contactSelectors) {
      const contact = page.locator(selector);
      const count = await contact.count();
      if (count > 0) {
        contactInfoFound += count;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (${selector}): ${count}`);
      }
    }
    
    console.log(`üìû –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${contactInfoFound}`);
  });

  test('–Ø–∑—ã–∫–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', async ({ page }) => {
    console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏...');
    
    await page.goto(BASE_URL);
    
    // –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —è–∑—ã–∫–æ–≤
    const languageSelectors = [
      '.language',
      '.lang',
      '.locale',
      'select[name*="lang"]',
      'select[name*="locale"]',
      '[class*="language"]',
      '[class*="lang"]'
    ];
    
    let languageSwitcherFound = false;
    for (const selector of languageSelectors) {
      const langSwitcher = page.locator(selector);
      if (await langSwitcher.count() > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–æ–≤: ${selector}`);
        await expect(langSwitcher.first()).toBeVisible();
        languageSwitcherFound = true;
        break;
      }
    }
    
    if (!languageSwitcherFound) {
      console.log('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º —è–∑—ã–∫–µ
    const ukrainianText = page.locator('text=/—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞|—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π|prokoleso/i');
    const ukrainianCount = await ukrainianText.count();
    console.log(`üá∫üá¶ –ù–∞–π–¥–µ–Ω–æ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ${ukrainianCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    const russianText = page.locator('text=/—Ä—É—Å—Å–∫–∏–π|—Ä–æ—Å—ñ–π—Å—å–∫–∞/i');
    const russianCount = await russianText.count();
    console.log(`üá∑üá∫ –ù–∞–π–¥–µ–Ω–æ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ${russianCount}`);
  });

  test('–ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è', async ({ page }) => {
    console.log('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto(BASE_URL);
    
    // –ü–æ–∏—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    const mobileMenuSelectors = [
      '.mobile-menu',
      '.hamburger',
      '.menu-toggle',
      '.burger',
      '[aria-label*="–º–µ–Ω—é"]',
      '[aria-label*="menu"]',
      '.navbar-toggler'
    ];
    
    let mobileMenuFound = false;
    for (const selector of mobileMenuSelectors) {
      const menu = page.locator(selector);
      if (await menu.count() > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é: ${selector}`);
        await expect(menu.first()).toBeVisible();
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –º–µ–Ω—é
        try {
          await menu.first().click();
          await page.waitForTimeout(1000); // –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
          console.log('‚úÖ –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã–ª–æ—Å—å');
        } catch (error) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é');
        }
        
        mobileMenuFound = true;
        break;
      }
    }
    
    if (!mobileMenuFound) {
      console.log('‚ö†Ô∏è –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const bodyBox = await page.locator('body').boundingBox();
    if (bodyBox) {
      console.log(`üìè –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${bodyBox.width}x${bodyBox.height}`);
      expect(bodyBox.width).toBeLessThanOrEqual(375);
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞', async ({ page }) => {
    console.log('üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞...');
    
    await page.goto(BASE_URL);
    
    // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    const authSelectors = [
      'a[href*="login"]',
      'a[href*="register"]',
      'a[href*="signin"]',
      'a[href*="signup"]',
      'a[href*="–≤—Ö–æ–¥"]',
      'a[href*="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]',
      '.login',
      '.register',
      '.auth'
    ];
    
    let authLinksFound = false;
    for (const selector of authSelectors) {
      const authLink = page.locator(selector);
      if (await authLink.count() > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${selector}`);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ
        await authLink.first().click();
        await page.waitForLoadState('networkidle');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º
        const forms = page.locator('form');
        const formCount = await forms.count();
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${formCount}`);
        
        if (formCount > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
          const inputs = page.locator('input[type="text"], input[type="email"], input[type="password"]');
          const inputCount = await inputs.count();
          console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞: ${inputCount}`);
          
          if (inputCount > 0) {
            console.log('‚úÖ –§–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã');
          }
        }
        
        authLinksFound = true;
        break;
      }
    }
    
    if (!authLinksFound) {
      console.log('‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  });
});