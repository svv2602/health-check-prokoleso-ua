import { test, expect } from '@playwright/test';

/**
 * –¢–µ—Å—Ç —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ checkout
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã, –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 */

test.describe('–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ - Prokoleso.ua', () => {
  test.beforeEach(async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞
    await page.goto('https://prokoleso.ua/ua/checkout/');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForLoadState('networkidle');
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–∞', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    await expect(page).toHaveTitle(/Prokoleso.ua/);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await expect(page.locator('h1, h2, h3')).toContainText(/–∑–∞–∫–∞–∑|–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ|checkout/i);
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ - –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const personalFields = [
      { selector: 'input[name*="name"], input[placeholder*="—ñ–º\'—è"], input[placeholder*="–∏–º—è"]', label: '–ò–º—è' },
      { selector: 'input[name*="surname"], input[placeholder*="–ø—Ä—ñ–∑–≤–∏—â–µ"], input[placeholder*="—Ñ–∞–º–∏–ª–∏—è"]', label: '–§–∞–º–∏–ª–∏—è' },
      { selector: 'input[name*="phone"], input[type="tel"], input[placeholder*="—Ç–µ–ª–µ—Ñ–æ–Ω"]', label: '–¢–µ–ª–µ—Ñ–æ–Ω' },
      { selector: 'input[name*="email"], input[type="email"], input[placeholder*="email"]', label: 'Email' }
    ];

    for (const field of personalFields) {
      const element = page.locator(field.selector).first();
      await expect(element).toBeVisible({ timeout: 5000 });
      console.log(`‚úÖ –ü–æ–ª–µ "${field.label}" –Ω–∞–π–¥–µ–Ω–æ`);
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞
    const addressFields = [
      { selector: 'input[name*="city"], input[placeholder*="–º—ñ—Å—Ç–æ"], input[placeholder*="–≥–æ—Ä–æ–¥"]', label: '–ì–æ—Ä–æ–¥' },
      { selector: 'input[name*="address"], input[placeholder*="–∞–¥—Ä–µ—Å–∞"], textarea[name*="address"]', label: '–ê–¥—Ä–µ—Å' },
      { selector: 'input[name*="postal"], input[name*="zip"], input[placeholder*="—ñ–Ω–¥–µ–∫—Å"]', label: '–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å' }
    ];

    for (const field of addressFields) {
      const element = page.locator(field.selector).first();
      if (await element.isVisible()) {
        console.log(`‚úÖ –ü–æ–ª–µ "${field.label}" –Ω–∞–π–¥–µ–Ω–æ`);
      } else {
        console.log(`‚ö†Ô∏è –ü–æ–ª–µ "${field.label}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å–∫—Ä—ã—Ç–æ`);
      }
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ–≤ –∏ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤', async ({ page }) => {
    // –ò—â–µ–º –≤—Å–µ —Å–µ–ª–µ–∫—Ç—ã –∏ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
    const selects = page.locator('select, [role="combobox"], .select, .dropdown');
    
    const selectCount = await selects.count();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–µ–ª–µ–∫—Ç–æ–≤: ${selectCount}`);

    for (let i = 0; i < selectCount; i++) {
      const select = selects.nth(i);
      if (await select.isVisible()) {
        const label = await select.getAttribute('aria-label') || 
                     await select.getAttribute('placeholder') || 
                     await select.getAttribute('name') || 
                     `–°–µ–ª–µ–∫—Ç ${i + 1}`;
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç: ${label}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–ª–µ–∫—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π
        await expect(select).toBeEnabled();
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å–µ–ª–µ–∫—Ç
        try {
          await select.click();
          await page.waitForTimeout(500);
          
          // –ò—â–µ–º –æ–ø—Ü–∏–∏
          const options = page.locator('option, [role="option"], .option, .dropdown-item');
          const optionCount = await options.count();
          
          if (optionCount > 0) {
            console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ü–∏–π: ${optionCount}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ü–∏–π
            for (let j = 0; j < Math.min(3, optionCount); j++) {
              const option = options.nth(j);
              const optionText = await option.textContent();
              if (optionText && optionText.trim()) {
                console.log(`    - ${optionText.trim()}`);
              }
            }
          } else {
            console.log(`  ‚ö†Ô∏è –û–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
          }
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç (–∫–ª–∏–∫ –≤–Ω–µ –µ–≥–æ)
          await page.click('body');
        } catch (error) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ–ª–µ–∫—Ç–∞: ${error.message}`);
        }
      }
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏', async ({ page }) => {
    // –ò—â–µ–º –±–ª–æ–∫ —Å —Å–ø–æ—Å–æ–±–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    const deliverySection = page.locator('[class*="delivery"], [class*="shipping"], .delivery-methods, .shipping-options');
    
    if (await deliverySection.count() > 0) {
      console.log('üöö –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏');
      
      // –ò—â–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —á–µ–∫–±–æ–∫—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏
      const deliveryOptions = page.locator('input[type="radio"][name*="delivery"], input[type="radio"][name*="shipping"], .delivery-option input');
      
      const optionCount = await deliveryOptions.count();
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏: ${optionCount}`);
      
      for (let i = 0; i < optionCount; i++) {
        const option = deliveryOptions.nth(i);
        if (await option.isVisible()) {
          const label = page.locator(`label[for="${await option.getAttribute('id')}"]`);
          const labelText = await label.textContent();
          console.log(`  ‚úÖ ${labelText?.trim() || `–û–ø—Ü–∏—è ${i + 1}`}`);
        }
      }
    } else {
      console.log('‚ö†Ô∏è –ë–ª–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã', async ({ page }) => {
    // –ò—â–µ–º –±–ª–æ–∫ —Å —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    const paymentSection = page.locator('[class*="payment"], [class*="pay"], .payment-methods, .payment-options');
    
    if (await paymentSection.count() > 0) {
      console.log('üí≥ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã');
      
      // –ò—â–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —á–µ–∫–±–æ–∫—Å—ã –æ–ø–ª–∞—Ç—ã
      const paymentOptions = page.locator('input[type="radio"][name*="payment"], input[type="radio"][name*="pay"], .payment-option input');
      
      const optionCount = await paymentOptions.count();
      console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: ${optionCount}`);
      
      for (let i = 0; i < optionCount; i++) {
        const option = paymentOptions.nth(i);
        if (await option.isVisible()) {
          const label = page.locator(`label[for="${await option.getAttribute('id')}"]`);
          const labelText = await label.textContent();
          console.log(`  ‚úÖ ${labelText?.trim() || `–û–ø—Ü–∏—è ${i + 1}`}`);
        }
      }
    } else {
      console.log('‚ö†Ô∏è –ë–ª–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π', async ({ page }) => {
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const submitButton = page.locator('button[type="submit"], input[type="submit"], .submit-btn, .order-btn, button:has-text("–∑–∞–∫–∞–∑"), button:has-text("–æ—Ñ–æ—Ä–º–∏—Ç—å")');
    
    if (await submitButton.count() > 0) {
      const button = submitButton.first();
      console.log('üîò –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
      await button.click();
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      await page.waitForTimeout(1000);
      
      // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
      const errorMessages = page.locator('.error, .invalid, .required, [class*="error"], [class*="invalid"], [class*="required"]');
      const errorCount = await errorMessages.count();
      
      if (errorCount > 0) {
        console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö: ${errorCount}`);
        for (let i = 0; i < Math.min(5, errorCount); i++) {
          const error = errorMessages.nth(i);
          const errorText = await error.textContent();
          if (errorText && errorText.trim()) {
            console.log(`  - ${errorText.trim()}`);
          }
        }
      } else {
        console.log('‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } else {
      console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  });

  test('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async ({ page }) => {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const testData = {
      name: '–¢–µ—Å—Ç',
      surname: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      phone: '+380671234567',
      email: 'test@example.com',
      city: '–ö–∏–µ–≤',
      address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1',
      postal: '01001'
    };

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è
    const nameField = page.locator('input[name*="name"], input[placeholder*="—ñ–º\'—è"], input[placeholder*="–∏–º—è"]').first();
    if (await nameField.isVisible()) {
      await nameField.fill(testData.name);
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "–ò–º—è"');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é
    const surnameField = page.locator('input[name*="surname"], input[placeholder*="–ø—Ä—ñ–∑–≤–∏—â–µ"], input[placeholder*="—Ñ–∞–º–∏–ª–∏—è"]').first();
    if (await surnameField.isVisible()) {
      await surnameField.fill(testData.surname);
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "–§–∞–º–∏–ª–∏—è"');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    const phoneField = page.locator('input[name*="phone"], input[type="tel"], input[placeholder*="—Ç–µ–ª–µ—Ñ–æ–Ω"]').first();
    if (await phoneField.isVisible()) {
      await phoneField.fill(testData.phone);
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "–¢–µ–ª–µ—Ñ–æ–Ω"');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º email
    const emailField = page.locator('input[name*="email"], input[type="email"], input[placeholder*="email"]').first();
    if (await emailField.isVisible()) {
      await emailField.fill(testData.email);
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "Email"');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –≥–æ—Ä–æ–¥
    const cityField = page.locator('input[name*="city"], input[placeholder*="–º—ñ—Å—Ç–æ"], input[placeholder*="–≥–æ—Ä–æ–¥"]').first();
    if (await cityField.isVisible()) {
      await cityField.fill(testData.city);
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "–ì–æ—Ä–æ–¥"');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å
    const addressField = page.locator('input[name*="address"], input[placeholder*="–∞–¥—Ä–µ—Å–∞"], textarea[name*="address"]').first();
    if (await addressField.isVisible()) {
      await addressField.fill(testData.address);
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "–ê–¥—Ä–µ—Å"');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    const postalField = page.locator('input[name*="postal"], input[name*="zip"], input[placeholder*="—ñ–Ω–¥–µ–∫—Å"]').first();
    if (await postalField.isVisible()) {
      await postalField.fill(testData.postal);
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å"');
    }

    console.log('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π', async ({ page }) => {
    // –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const commentField = page.locator('textarea[name*="comment"], textarea[name*="note"], textarea[placeholder*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä"], textarea[placeholder*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]');
    
    if (await commentField.count() > 0) {
      console.log('üí¨ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
      
      const comment = commentField.first();
      await comment.fill('–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É');
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    } else {
      console.log('‚ÑπÔ∏è –ü–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ò—â–µ–º —á–µ–∫–±–æ–∫—Å—ã —Å–æ–≥–ª–∞—Å–∏—è
    const agreementCheckboxes = page.locator('input[type="checkbox"][name*="agree"], input[type="checkbox"][name*="consent"], input[type="checkbox"][name*="terms"]');
    
    const checkboxCount = await agreementCheckboxes.count();
    if (checkboxCount > 0) {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–±–æ–∫—Å–æ–≤ —Å–æ–≥–ª–∞—Å–∏—è: ${checkboxCount}`);
      
      for (let i = 0; i < checkboxCount; i++) {
        const checkbox = agreementCheckboxes.nth(i);
        if (await checkbox.isVisible()) {
          await checkbox.check();
          console.log(`‚úÖ –û—Ç–º–µ—á–µ–Ω —á–µ–∫–±–æ–∫—Å ${i + 1}`);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è –ß–µ–∫–±–æ–∫—Å—ã —Å–æ–≥–ª–∞—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞', async ({ page }) => {
    // –ò—â–µ–º –±–ª–æ–∫ —Å –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const summarySection = page.locator('[class*="summary"], [class*="total"], [class*="order-total"], .order-summary, .checkout-summary');
    
    if (await summarySection.count() > 0) {
      console.log('üí∞ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
      
      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
      const priceElements = page.locator('[class*="price"], [class*="cost"], .price, .total-price, [data-price]');
      const priceCount = await priceElements.count();
      
      if (priceCount > 0) {
        console.log(`üíµ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: ${priceCount}`);
        
        for (let i = 0; i < Math.min(5, priceCount); i++) {
          const priceElement = priceElements.nth(i);
          const priceText = await priceElement.textContent();
          if (priceText && priceText.trim()) {
            console.log(`  - ${priceText.trim()}`);
          }
        }
      }
    } else {
      console.log('‚ö†Ô∏è –ë–ª–æ–∫ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ä–º—ã', async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π viewport
    await page.setViewportSize({ width: 375, height: 667 });
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞
    await page.reload();
    await page.waitForLoadState('networkidle');
    
    console.log('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ä–º—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤–∏–¥–Ω—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
    const nameField = page.locator('input[name*="name"], input[placeholder*="—ñ–º\'—è"], input[placeholder*="–∏–º—è"]').first();
    if (await nameField.isVisible()) {
      console.log('‚úÖ –ü–æ–ª–µ –∏–º–µ–Ω–∏ –≤–∏–¥–∏–º–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º');
    }
    
    const phoneField = page.locator('input[name*="phone"], input[type="tel"]').first();
    if (await phoneField.isVisible()) {
      console.log('‚úÖ –ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∏–¥–∏–º–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    const submitButton = page.locator('button[type="submit"], .submit-btn').first();
    if (await submitButton.isVisible()) {
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–∏–º–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º');
    }
  });
});
