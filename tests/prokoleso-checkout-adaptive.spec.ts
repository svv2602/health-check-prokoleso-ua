import { test, expect } from '@playwright/test';

/**
 * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç, —á—Ç–æ —Ñ–æ—Ä–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–µ
 */

test.describe('–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ - Prokoleso.ua', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('https://prokoleso.ua/ua/checkout/');
    // –£–±–∏—Ä–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ networkidle, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¥–æ–ª–≥–æ
    await page.waitForTimeout(3000);
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã', async ({ page }) => {
    console.log('üõí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const title = await page.title();
    console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "${title}"`);
    
    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–µ
    const emptyCartMessages = [
      '–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π',
      '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 
      'empty cart',
      'cart is empty',
      '–í–∞—à —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–æ–≥–æ –ø–æ—Ä–æ–∂–Ω—ñ–π',
      '–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π'
    ];
    
    let cartEmpty = false;
    for (const message of emptyCartMessages) {
      const element = page.locator(`text=${message}`);
      if (await element.count() > 0 && await element.first().isVisible()) {
        console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
        cartEmpty = true;
        break;
      }
    }
    
    if (cartEmpty) {
      console.log('üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã');
      
      // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥
      const catalogLinks = page.locator('a[href*="catalog"], a[href*="–∫–∞—Ç–∞–ª–æ–≥"], a:has-text("–î–æ –∫–∞—Ç–∞–ª–æ–≥—É"), a:has-text("–í –∫–∞—Ç–∞–ª–æ–≥")');
      const linkCount = await catalogLinks.count();
      
      if (linkCount > 0) {
        console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥: ${linkCount}`);
        for (let i = 0; i < Math.min(3, linkCount); i++) {
          const link = catalogLinks.nth(i);
          const linkText = await link.textContent();
          const linkHref = await link.getAttribute('href');
          console.log(`  - ${linkText?.trim()}: ${linkHref}`);
        }
      }
      
      // –ò—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
      const productSuggestions = page.locator('text=–ö—É–ø–∏—Ç–∏, text=–ü–æ–∫—É–ø–∫–∞, text=–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó, .product-suggestion, .recommendation');
      const suggestionCount = await productSuggestions.count();
      
      if (suggestionCount > 0) {
        console.log(`üí° –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤: ${suggestionCount}`);
      }
      
      console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —Ñ–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return;
    }
    
    console.log('üõí –í –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞');
  });

  test('–ü–æ–∏—Å–∫ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)', async ({ page }) => {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞
    const formSelectors = [
      'form',
      '[class*="checkout"]',
      '[class*="order"]',
      '[class*="cart"]',
      '.checkout-form',
      '.order-form',
      '.cart-form'
    ];
    
    let formFound = false;
    for (const selector of formSelectors) {
      const elements = page.locator(selector);
      const count = await elements.count();
      
      if (count > 0) {
        console.log(`üìù –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞: ${selector} (${count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
        formFound = true;
        break;
      }
    }
    
    if (!formFound) {
      console.log('‚ö†Ô∏è –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
      return;
    }
    
    // –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
    const inputSelectors = [
      'input[type="text"]',
      'input[type="email"]',
      'input[type="tel"]',
      'input[type="number"]',
      'textarea',
      'select'
    ];
    
    let totalInputs = 0;
    for (const selector of inputSelectors) {
      const elements = page.locator(selector);
      const count = await elements.count();
      
      if (count > 0) {
        console.log(`üìù –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ "${selector}": ${count}`);
        totalInputs += count;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for (let i = 0; i < Math.min(3, count); i++) {
          const element = elements.nth(i);
          if (await element.isVisible()) {
            const placeholder = await element.getAttribute('placeholder');
            const name = await element.getAttribute('name');
            const type = await element.getAttribute('type');
            const tagName = await element.evaluate(el => el.tagName);
            
            console.log(`  - ${tagName}${name ? `[name="${name}"]` : ''}${type ? `[type="${type}"]` : ''}${placeholder ? ` placeholder="${placeholder}"` : ''}`);
          }
        }
      }
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞: ${totalInputs}`);
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å—Å—ã–ª–æ–∫', async ({ page }) => {
    console.log('üß≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å—Å—ã–ª–æ–∫...');
    
    // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const allLinks = page.locator('a[href]');
    const linkCount = await allLinks.count();
    
    console.log(`üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${linkCount}`);
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
    const linkCategories = {
      '–ö–∞—Ç–∞–ª–æ–≥': ['catalog', '–∫–∞—Ç–∞–ª–æ–≥', '—Ç–æ–≤–∞—Ä', 'product'],
      '–ö–æ—Ä–∑–∏–Ω–∞': ['cart', '–∫–æ—Ä–∑–∏–Ω–∞', 'basket'],
      '–ü—Ä–æ—Ñ–∏–ª—å': ['profile', '–ø—Ä–æ—Ñ–∏–ª—å', 'account', '–∞–∫–∫–∞—É–Ω—Ç'],
      '–ö–æ–Ω—Ç–∞–∫—Ç—ã': ['contact', '–∫–æ–Ω—Ç–∞–∫—Ç', 'about', '–æ –Ω–∞—Å'],
      '–ü–æ–º–æ—â—å': ['help', '–ø–æ–º–æ—â—å', 'support', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
    };
    
    for (const [category, keywords] of Object.entries(linkCategories)) {
      let categoryCount = 0;
      const categoryLinks = [];
      
      for (let i = 0; i < linkCount; i++) {
        const link = allLinks.nth(i);
        const href = await link.getAttribute('href');
        const text = await link.textContent();
        
        if (href && keywords.some(keyword => 
          href.toLowerCase().includes(keyword) || 
          (text && text.toLowerCase().includes(keyword))
        )) {
          categoryCount++;
          categoryLinks.push({
            text: text?.trim(),
            href: href
          });
        }
      }
      
      if (categoryCount > 0) {
        console.log(`üìÇ ${category}: ${categoryCount} —Å—Å—ã–ª–æ–∫`);
        for (let i = 0; i < Math.min(3, categoryLinks.length); i++) {
          const link = categoryLinks[i];
          console.log(`  - ${link.text || '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}: ${link.href}`);
        }
      }
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏', async ({ page }) => {
    console.log('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
    const viewports = [
      { width: 375, height: 667, name: 'iPhone SE' },
      { width: 414, height: 896, name: 'iPhone 11' },
      { width: 768, height: 1024, name: 'iPad' }
    ];
    
    for (const viewport of viewports) {
      console.log(`\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${viewport.name} (${viewport.width}x${viewport.height})`);
      
      await page.setViewportSize({ width: viewport.width, height: viewport.height });
      await page.reload();
      await page.waitForTimeout(2000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const checks = [
        { selector: 'header, .header, nav', name: '–®–∞–ø–∫–∞ —Å–∞–π—Ç–∞' },
        { selector: 'main, .main, .content', name: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç' },
        { selector: 'footer, .footer', name: '–ü–æ–¥–≤–∞–ª —Å–∞–π—Ç–∞' },
        { selector: 'form, .form', name: '–§–æ—Ä–º—ã' },
        { selector: 'button, .btn', name: '–ö–Ω–æ–ø–∫–∏' }
      ];
      
      for (const check of checks) {
        const elements = page.locator(check.selector);
        const count = await elements.count();
        const visibleCount = await elements.filter({ hasText: /.+/ }).count();
        
        if (count > 0) {
          console.log(`  ‚úÖ ${check.name}: ${count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (${visibleCount} –≤–∏–¥–∏–º—ã—Ö)`);
        } else {
          console.log(`  ‚ö†Ô∏è ${check.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
      }
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏', async ({ page }) => {
    console.log('‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏...');
    
    const startTime = Date.now();
    
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
    await page.goto('https://prokoleso.ua/ua/checkout/', { waitUntil: 'domcontentloaded' });
    const domContentLoadedTime = Date.now() - startTime;
    
    await page.waitForLoadState('load');
    const fullLoadTime = Date.now() - startTime;
    
    console.log(`üìä –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ DOM: ${domContentLoadedTime}–º—Å`);
    console.log(`üìä –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${fullLoadTime}–º—Å`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageSize = await page.evaluate(() => {
      return {
        htmlSize: document.documentElement.outerHTML.length,
        bodySize: document.body.outerHTML.length,
        scriptCount: document.scripts.length,
        styleCount: document.styleSheets.length
      };
    });
    
    console.log(`üìä –†–∞–∑–º–µ—Ä HTML: ${Math.round(pageSize.htmlSize / 1024)}KB`);
    console.log(`üìä –†–∞–∑–º–µ—Ä body: ${Math.round(pageSize.bodySize / 1024)}KB`);
    console.log(`üìä –°–∫—Ä–∏–ø—Ç–æ–≤: ${pageSize.scriptCount}`);
    console.log(`üìä –°—Ç–∏–ª–µ–π: ${pageSize.styleCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    const consoleErrors = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
      }
    });
    
    await page.waitForTimeout(2000);
    
    if (consoleErrors.length > 0) {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏: ${consoleErrors.length}`);
      for (let i = 0; i < Math.min(3, consoleErrors.length); i++) {
        console.log(`  - ${consoleErrors[i]}`);
      }
    } else {
      console.log('‚úÖ –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (a11y)', async ({ page }) => {
    console.log('‚ôø –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const accessibilityChecks = [
      { selector: 'img[alt]', name: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å alt' },
      { selector: 'input[aria-label], input[aria-labelledby]', name: '–ü–æ–ª—è —Å aria-label' },
      { selector: 'button[aria-label], button[aria-labelledby]', name: '–ö–Ω–æ–ø–∫–∏ —Å aria-label' },
      { selector: '[role="button"]', name: '–≠–ª–µ–º–µ–Ω—Ç—ã —Å role="button"' },
      { selector: '[role="navigation"]', name: '–ù–∞–≤–∏–≥–∞—Ü–∏—è' },
      { selector: '[role="main"]', name: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç' },
      { selector: '[role="banner"]', name: '–®–∞–ø–∫–∞' },
      { selector: '[role="contentinfo"]', name: '–ü–æ–¥–≤–∞–ª' }
    ];
    
    for (const check of accessibilityChecks) {
      const elements = page.locator(check.selector);
      const count = await elements.count();
      
      if (count > 0) {
        console.log(`‚úÖ ${check.name}: ${count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      } else {
        console.log(`‚ö†Ô∏è ${check.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headings = page.locator('h1, h2, h3, h4, h5, h6');
    const headingCount = await headings.count();
    
    if (headingCount > 0) {
      console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${headingCount}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      const headingLevels = [];
      for (let i = 0; i < Math.min(5, headingCount); i++) {
        const heading = headings.nth(i);
        const tagName = await heading.evaluate(el => el.tagName);
        const text = await heading.textContent();
        headingLevels.push(tagName);
        
        if (text && text.trim()) {
          console.log(`  - ${tagName}: ${text.trim().substring(0, 50)}${text.trim().length > 50 ? '...' : ''}`);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      const hasH1 = headingLevels.includes('H1');
      if (hasH1) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1');
      } else {
        console.log('‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ H1 –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ SEO —ç–ª–µ–º–µ–Ω—Ç–æ–≤', async ({ page }) => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SEO —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏
    const metaTags = [
      { selector: 'meta[name="description"]', name: '–û–ø–∏—Å–∞–Ω–∏–µ' },
      { selector: 'meta[name="keywords"]', name: '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞' },
      { selector: 'meta[property="og:title"]', name: 'Open Graph –∑–∞–≥–æ–ª–æ–≤–æ–∫' },
      { selector: 'meta[property="og:description"]', name: 'Open Graph –æ–ø–∏—Å–∞–Ω–∏–µ' },
      { selector: 'meta[name="twitter:card"]', name: 'Twitter Card' },
      { selector: 'link[rel="canonical"]', name: '–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞' }
    ];
    
    for (const meta of metaTags) {
      const element = page.locator(meta.selector);
      if (await element.count() > 0) {
        const content = await element.getAttribute('content') || await element.getAttribute('href');
        console.log(`‚úÖ ${meta.name}: ${content?.substring(0, 100)}${content && content.length > 100 ? '...' : ''}`);
      } else {
        console.log(`‚ö†Ô∏è ${meta.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const structuredData = page.locator('script[type="application/ld+json"]');
    const dataCount = await structuredData.count();
    
    if (dataCount > 0) {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${dataCount}`);
    } else {
      console.log('‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  });
});
