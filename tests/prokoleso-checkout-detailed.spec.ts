import { test, expect } from '@playwright/test';

/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã https://prokoleso.ua/ua/checkout/
 */

test.describe('–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ - Prokoleso.ua', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('https://prokoleso.ua/ua/checkout/');
    await page.waitForLoadState('networkidle');
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏ —Ç–æ–≤–∞—Ä–æ–≤', async ({ page }) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã)
    const cartEmpty = page.locator('text=–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, text=–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, .cart-empty, .empty-cart');
    
    if (await cartEmpty.isVisible()) {
      console.log('üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥
      const catalogLinks = page.locator('a[href*="catalog"], a[href*="–∫–∞—Ç–∞–ª–æ–≥"], a:has-text("–î–æ –∫–∞—Ç–∞–ª–æ–≥—É")');
      const linkCount = await catalogLinks.count();
      
      if (linkCount > 0) {
        console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥: ${linkCount}`);
        for (let i = 0; i < linkCount; i++) {
          const link = catalogLinks.nth(i);
          const linkText = await link.textContent();
          const linkHref = await link.getAttribute('href');
          console.log(`  - ${linkText?.trim()}: ${linkHref}`);
        }
      }
    } else {
      console.log('üõí –í –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞');
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏', async ({ page }) => {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞...');
    
    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    const fieldSelectors = {
      // –ü–æ–ª—è –∏–º–µ–Ω–∏
      firstName: [
        'input[name="first_name"]',
        'input[name="firstName"]',
        'input[name="name"]',
        'input[placeholder*="—ñ–º\'—è"]',
        'input[placeholder*="–∏–º—è"]',
        'input[placeholder*="–Ü–º\'—è"]',
        'input[placeholder*="–ò–º—è"]',
        '#first_name',
        '#firstName',
        '#name'
      ],
      
      // –ü–æ–ª—è —Ñ–∞–º–∏–ª–∏–∏
      lastName: [
        'input[name="last_name"]',
        'input[name="lastName"]',
        'input[name="surname"]',
        'input[placeholder*="–ø—Ä—ñ–∑–≤–∏—â–µ"]',
        'input[placeholder*="—Ñ–∞–º–∏–ª–∏—è"]',
        'input[placeholder*="–ü—Ä—ñ–∑–≤–∏—â–µ"]',
        'input[placeholder*="–§–∞–º–∏–ª–∏—è"]',
        '#last_name',
        '#lastName',
        '#surname'
      ],
      
      // –ü–æ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      phone: [
        'input[name="phone"]',
        'input[name="telephone"]',
        'input[type="tel"]',
        'input[placeholder*="—Ç–µ–ª–µ—Ñ–æ–Ω"]',
        'input[placeholder*="–¢–µ–ª–µ—Ñ–æ–Ω"]',
        'input[placeholder*="+380"]',
        '#phone',
        '#telephone'
      ],
      
      // –ü–æ–ª—è email
      email: [
        'input[name="email"]',
        'input[type="email"]',
        'input[placeholder*="email"]',
        'input[placeholder*="Email"]',
        'input[placeholder*="–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞"]',
        '#email'
      ],
      
      // –ü–æ–ª—è –≥–æ—Ä–æ–¥–∞
      city: [
        'input[name="city"]',
        'input[name="town"]',
        'input[placeholder*="–º—ñ—Å—Ç–æ"]',
        'input[placeholder*="–≥–æ—Ä–æ–¥"]',
        'input[placeholder*="–ú—ñ—Å—Ç–æ"]',
        'input[placeholder*="–ì–æ—Ä–æ–¥"]',
        'select[name="city"]',
        '#city',
        '#town'
      ],
      
      // –ü–æ–ª—è –∞–¥—Ä–µ—Å–∞
      address: [
        'input[name="address"]',
        'input[name="street"]',
        'textarea[name="address"]',
        'input[placeholder*="–∞–¥—Ä–µ—Å–∞"]',
        'input[placeholder*="–∞–¥—Ä–µ—Å"]',
        'input[placeholder*="–ê–¥—Ä–µ—Å–∞"]',
        'input[placeholder*="–ê–¥—Ä–µ—Å"]',
        '#address',
        '#street'
      ],
      
      // –ü–æ–ª—è –ø–æ—á—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
      postal: [
        'input[name="postal"]',
        'input[name="zip"]',
        'input[name="postcode"]',
        'input[placeholder*="—ñ–Ω–¥–µ–∫—Å"]',
        'input[placeholder*="–∏–Ω–¥–µ–∫—Å"]',
        'input[placeholder*="–ø–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å"]',
        'input[placeholder*="–ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å"]',
        '#postal',
        '#zip',
        '#postcode'
      ]
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    for (const [fieldName, selectors] of Object.entries(fieldSelectors)) {
      let fieldFound = false;
      
      for (const selector of selectors) {
        const element = page.locator(selector);
        if (await element.count() > 0 && await element.first().isVisible()) {
          console.log(`‚úÖ –ü–æ–ª–µ "${fieldName}" –Ω–∞–π–¥–µ–Ω–æ: ${selector}`);
          fieldFound = true;
          break;
        }
      }
      
      if (!fieldFound) {
        console.log(`‚ö†Ô∏è –ü–æ–ª–µ "${fieldName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ–≤ –∏ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤', async ({ page }) => {
    console.log('üìã –ü–æ–∏—Å–∫ —Å–µ–ª–µ–∫—Ç–æ–≤ –∏ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤...');
    
    // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç—ã
    const selectSelectors = [
      'select',
      '[role="combobox"]',
      '.select',
      '.dropdown',
      '.custom-select',
      '.form-select',
      '[data-select]',
      '.chosen-container',
      '.select2-container'
    ];
    
    let totalSelects = 0;
    
    for (const selector of selectSelectors) {
      const elements = page.locator(selector);
      const count = await elements.count();
      
      if (count > 0) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ "${selector}": ${count}`);
        totalSelects += count;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for (let i = 0; i < Math.min(3, count); i++) {
          const element = elements.nth(i);
          if (await element.isVisible()) {
            const tagName = await element.evaluate(el => el.tagName);
            const className = await element.getAttribute('class');
            const id = await element.getAttribute('id');
            const name = await element.getAttribute('name');
            
            console.log(`  - ${tagName}${id ? `#${id}` : ''}${name ? `[name="${name}"]` : ''}${className ? `.${className.split(' ')[0]}` : ''}`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–ø—Ü–∏–∏
            try {
              await element.click();
              await page.waitForTimeout(300);
              
              const options = page.locator('option, [role="option"], .option, .dropdown-item, .select-option');
              const optionCount = await options.count();
              
              if (optionCount > 0) {
                console.log(`    üìù –û–ø—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${optionCount}`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ü–∏–π
                for (let j = 0; j < Math.min(3, optionCount); j++) {
                  const option = options.nth(j);
                  const optionText = await option.textContent();
                  if (optionText && optionText.trim()) {
                    console.log(`      - ${optionText.trim()}`);
                  }
                }
              }
              
              // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç
              await page.keyboard.press('Escape');
            } catch (error) {
              console.log(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${error.message}`);
            }
          }
        }
      }
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–µ–ª–µ–∫—Ç–æ–≤: ${totalSelects}`);
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã', async ({ page }) => {
    console.log('üöö –ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã...');
    
    // –ò—â–µ–º –±–ª–æ–∫–∏ —Å –æ–ø—Ü–∏—è–º–∏
    const sections = [
      { name: '–î–æ—Å—Ç–∞–≤–∫–∞', selectors: ['.delivery', '.shipping', '[class*="delivery"]', '[class*="shipping"]'] },
      { name: '–û–ø–ª–∞—Ç–∞', selectors: ['.payment', '.pay', '[class*="payment"]', '[class*="pay"]'] }
    ];
    
    for (const section of sections) {
      let sectionFound = false;
      
      for (const selector of section.selectors) {
        const elements = page.locator(selector);
        const count = await elements.count();
        
        if (count > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ "${section.name}": ${selector} (${count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
          sectionFound = true;
          
          // –ò—â–µ–º –æ–ø—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
          const options = elements.locator('input[type="radio"], input[type="checkbox"], .option, .choice');
          const optionCount = await options.count();
          
          if (optionCount > 0) {
            console.log(`  üìã –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ü–∏–π: ${optionCount}`);
            
            for (let i = 0; i < Math.min(5, optionCount); i++) {
              const option = options.nth(i);
              if (await option.isVisible()) {
                const optionText = await option.textContent();
                const optionType = await option.getAttribute('type');
                const optionName = await option.getAttribute('name');
                
                console.log(`    - ${optionText?.trim() || `–û–ø—Ü–∏—è ${i + 1}`} (${optionType || '—ç–ª–µ–º–µ–Ω—Ç'})`);
              }
            }
          }
        }
      }
      
      if (!sectionFound) {
        console.log(`‚ö†Ô∏è –ë–ª–æ–∫ "${section.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π', async ({ page }) => {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã...');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    const submitSelectors = [
      'button[type="submit"]',
      'input[type="submit"]',
      '.submit-btn',
      '.order-btn',
      'button:has-text("–∑–∞–∫–∞–∑")',
      'button:has-text("–æ—Ñ–æ—Ä–º–∏—Ç—å")',
      'button:has-text("–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")',
      'button:has-text("–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
      'button:has-text("–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏")',
      'button:has-text("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å")'
    ];
    
    let submitButton = null;
    
    for (const selector of submitSelectors) {
      const button = page.locator(selector);
      if (await button.count() > 0 && await button.first().isVisible()) {
        submitButton = button.first();
        console.log(`üîò –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${selector}`);
        break;
      }
    }
    
    if (submitButton) {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
      console.log('üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º—ã...');
      await submitButton.click();
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
      await page.waitForTimeout(1000);
      
      // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
      const errorSelectors = [
        '.error',
        '.invalid',
        '.required',
        '[class*="error"]',
        '[class*="invalid"]',
        '[class*="required"]',
        '.field-error',
        '.validation-error',
        '.form-error'
      ];
      
      let totalErrors = 0;
      
      for (const selector of errorSelectors) {
        const errors = page.locator(selector);
        const count = await errors.count();
        
        if (count > 0) {
          console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ "${selector}": ${count}`);
          totalErrors += count;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
          for (let i = 0; i < Math.min(3, count); i++) {
            const error = errors.nth(i);
            const errorText = await error.textContent();
            if (errorText && errorText.trim()) {
              console.log(`  - ${errorText.trim()}`);
            }
          }
        }
      }
      
      if (totalErrors === 0) {
        console.log('‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      } else {
        console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${totalErrors}`);
      }
    } else {
      console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  });

  test('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async ({ page }) => {
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    
    const testData = {
      firstName: '–¢–µ—Å—Ç',
      lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      phone: '+380671234567',
      email: 'test@example.com',
      city: '–ö–∏–µ–≤',
      address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1',
      postal: '01001',
      comment: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—ã'
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è
    const fillField = async (selectors: string[], value: string, fieldName: string) => {
      for (const selector of selectors) {
        const element = page.locator(selector);
        if (await element.count() > 0 && await element.first().isVisible()) {
          await element.first().fill(value);
          console.log(`‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "${fieldName}": ${value}`);
          return true;
        }
      }
      console.log(`‚ö†Ô∏è –ü–æ–ª–µ "${fieldName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return false;
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
    await fillField(['input[name="first_name"]', 'input[name="firstName"]', 'input[name="name"]'], testData.firstName, '–ò–º—è');
    await fillField(['input[name="last_name"]', 'input[name="lastName"]', 'input[name="surname"]'], testData.lastName, '–§–∞–º–∏–ª–∏—è');
    await fillField(['input[name="phone"]', 'input[type="tel"]'], testData.phone, '–¢–µ–ª–µ—Ñ–æ–Ω');
    await fillField(['input[name="email"]', 'input[type="email"]'], testData.email, 'Email');
    await fillField(['input[name="city"]', 'select[name="city"]'], testData.city, '–ì–æ—Ä–æ–¥');
    await fillField(['input[name="address"]', 'textarea[name="address"]'], testData.address, '–ê–¥—Ä–µ—Å');
    await fillField(['input[name="postal"]', 'input[name="zip"]'], testData.postal, '–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å');
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await fillField(['textarea[name="comment"]', 'textarea[name="note"]', 'textarea[placeholder*="–∫–æ–º–º–µ–Ω—Ç–∞—Ä"]'], testData.comment, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
    
    console.log('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ü–µ–Ω', async ({ page }) => {
    console.log('üí∞ –ü–æ–∏—Å–∫ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å—É–º–º–∞–º–∏
    const priceSelectors = [
      '.price',
      '.cost',
      '.total',
      '.sum',
      '[class*="price"]',
      '[class*="cost"]',
      '[class*="total"]',
      '[data-price]',
      '[data-cost]',
      '[data-total]'
    ];
    
    let totalPrices = 0;
    
    for (const selector of priceSelectors) {
      const elements = page.locator(selector);
      const count = await elements.count();
      
      if (count > 0) {
        console.log(`üíµ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ "${selector}": ${count}`);
        totalPrices += count;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω
        for (let i = 0; i < Math.min(3, count); i++) {
          const element = elements.nth(i);
          const priceText = await element.textContent();
          if (priceText && priceText.trim()) {
            console.log(`  - ${priceText.trim()}`);
          }
        }
      }
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: ${totalPrices}`);
    
    // –ò—â–µ–º –±–ª–æ–∫–∏ —Å –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const summarySelectors = [
      '.order-summary',
      '.checkout-summary',
      '.cart-summary',
      '[class*="summary"]',
      '[class*="total"]',
      '.order-total',
      '.checkout-total'
    ];
    
    for (const selector of summarySelectors) {
      const elements = page.locator(selector);
      const count = await elements.count();
      
      if (count > 0) {
        console.log(`üìã –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${selector} (${count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
      }
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏', async ({ page }) => {
    console.log('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
    const viewports = [
      { width: 375, height: 667, name: 'iPhone SE' },
      { width: 414, height: 896, name: 'iPhone 11' },
      { width: 768, height: 1024, name: 'iPad' },
      { width: 1024, height: 768, name: 'iPad Landscape' }
    ];
    
    for (const viewport of viewports) {
      console.log(`\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${viewport.name} (${viewport.width}x${viewport.height})`);
      
      await page.setViewportSize({ width: viewport.width, height: viewport.height });
      await page.reload();
      await page.waitForLoadState('networkidle');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const nameField = page.locator('input[name*="name"], input[placeholder*="—ñ–º\'—è"], input[placeholder*="–∏–º—è"]').first();
      const phoneField = page.locator('input[name*="phone"], input[type="tel"]').first();
      const submitButton = page.locator('button[type="submit"], .submit-btn').first();
      
      const checks = [
        { element: nameField, name: '–ü–æ–ª–µ –∏–º–µ–Ω–∏' },
        { element: phoneField, name: '–ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' },
        { element: submitButton, name: '–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' }
      ];
      
      for (const check of checks) {
        if (await check.element.isVisible()) {
          console.log(`  ‚úÖ ${check.name} –≤–∏–¥–∏–º–æ`);
        } else {
          console.log(`  ‚ö†Ô∏è ${check.name} –Ω–µ –≤–∏–¥–∏–º–æ`);
        }
      }
    }
  });
});
