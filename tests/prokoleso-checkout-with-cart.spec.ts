import { test, expect } from '@playwright/test';

/**
 * –¢–µ—Å—Ç —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞
 */

test.describe('–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ - Prokoleso.ua', () => {
  test.beforeEach(async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await page.goto('https://prokoleso.ua/');
    await page.waitForLoadState('networkidle');
  });

  test('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é', async ({ page }) => {
    console.log('üõí –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É...');
    
    // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const productLinks = page.locator('a[href*="/product/"], a[href*="/shiny/"], .product-item a, .product-card a');
    const productCount = await productLinks.count();
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${productCount}`);
    
    if (productCount === 0) {
      console.log('‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞—Ç–∞–ª–æ–≥...');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞—Ç–∞–ª–æ–≥ —à–∏–Ω
      await page.goto('https://prokoleso.ua/ua/shiny/');
      await page.waitForLoadState('networkidle');
      
      // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
      const catalogProducts = page.locator('a[href*="/product/"], .product-item a, .product-card a, .product-link');
      const catalogProductCount = await catalogProducts.count();
      
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${catalogProductCount}`);
      
      if (catalogProductCount > 0) {
        // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
        const firstProduct = catalogProducts.first();
        const productUrl = await firstProduct.getAttribute('href');
        console.log(`üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–æ–≤–∞—Ä—É: ${productUrl}`);
        
        await firstProduct.click();
        await page.waitForLoadState('networkidle');
      }
    } else {
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const firstProduct = productLinks.first();
      const productUrl = await firstProduct.getAttribute('href');
      console.log(`üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–æ–≤–∞—Ä—É: ${productUrl}`);
      
      await firstProduct.click();
      await page.waitForLoadState('networkidle');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
    const isProductPage = await page.locator('.product-page, .product-detail, [class*="product"]').count() > 0;
    
    if (isProductPage) {
      console.log('‚úÖ –ú—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞, –∏—â–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É...');
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
      const addToCartSelectors = [
        'button:has-text("–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫")',
        'button:has-text("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")',
        'button:has-text("–ö—É–ø–∏—Ç–∏")',
        'button:has-text("–ö—É–ø–∏—Ç—å")',
        '.add-to-cart',
        '.btn-cart',
        '.buy-button',
        'button[data-action="add-to-cart"]',
        'input[type="submit"][value*="–∫–æ—Ä–∑–∏–Ω—É"]',
        'input[type="submit"][value*="–∫–æ—à–∏–∫"]'
      ];
      
      let addToCartButton = null;
      
      for (const selector of addToCartSelectors) {
        const button = page.locator(selector);
        if (await button.count() > 0 && await button.first().isVisible()) {
          addToCartButton = button.first();
          console.log(`üîò –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: ${selector}`);
          break;
        }
      }
      
      if (addToCartButton) {
        // –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä —à–∏–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ–ª–µ–∫—Ç
        const sizeSelectors = [
          'select[name*="size"]',
          'select[name*="—Ä–∞–∑–º–µ—Ä"]',
          'select[name*="—Ç–∏–ø–æ—Ä–∞–∑–º–µ—Ä"]',
          '.size-select',
          '.tire-size'
        ];
        
        for (const selector of sizeSelectors) {
          const sizeSelect = page.locator(selector);
          if (await sizeSelect.count() > 0 && await sizeSelect.first().isVisible()) {
            console.log('üìè –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç —Ä–∞–∑–º–µ—Ä–∞, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π...');
            
            const options = sizeSelect.locator('option:not([disabled]):not([value=""])');
            const optionCount = await options.count();
            
            if (optionCount > 0) {
              await options.first().click();
              console.log('‚úÖ –†–∞–∑–º–µ—Ä –≤—ã–±—Ä–∞–Ω');
            }
            break;
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        console.log('üõí –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É...');
        await addToCartButton.click();
        
        // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await page.waitForTimeout(2000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        const successMessages = [
          '–î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫',
          '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É',
          '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω',
          '–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ',
          '–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
        ];
        
        let addedToCart = false;
        for (const message of successMessages) {
          const messageElement = page.locator(`text=${message}`);
          if (await messageElement.count() > 0 && await messageElement.first().isVisible()) {
            console.log(`‚úÖ ${message}`);
            addedToCart = true;
            break;
          }
        }
        
        if (!addedToCart) {
          console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        console.log('üõí –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–∑–∏–Ω—É...');
        const cartSelectors = [
          'a[href*="/cart"]',
          'a[href*="/–∫–æ—à–∏–∫"]',
          'a[href*="/checkout"]',
          '.cart-link',
          '.basket-link',
          'button:has-text("–ö–æ—à–∏–∫")',
          'button:has-text("–ö–æ—Ä–∑–∏–Ω–∞")'
        ];
        
        let cartLink = null;
        for (const selector of cartSelectors) {
          const link = page.locator(selector);
          if (await link.count() > 0 && await link.first().isVisible()) {
            cartLink = link.first();
            console.log(`üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É: ${selector}`);
            break;
          }
        }
        
        if (cartLink) {
          await cartLink.click();
          await page.waitForLoadState('networkidle');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
          const cartTitle = await page.title();
          console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ—Ä–∑–∏–Ω—ã: "${cartTitle}"`);
          
          // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
          const checkoutSelectors = [
            'button:has-text("–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")',
            'button:has-text("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")',
            'button:has-text("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é")',
            'a[href*="/checkout"]',
            '.checkout-btn',
            '.order-btn'
          ];
          
          let checkoutButton = null;
          for (const selector of checkoutSelectors) {
            const button = page.locator(selector);
            if (await button.count() > 0 && await button.first().isVisible()) {
              checkoutButton = button.first();
              console.log(`üîò –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${selector}`);
              break;
            }
          }
          
          if (checkoutButton) {
            console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞...');
            await checkoutButton.click();
            await page.waitForLoadState('networkidle');
            
            // –¢–µ–ø–µ—Ä—å –º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            const checkoutTitle = await page.title();
            console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: "${checkoutTitle}"`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
            const formSelectors = [
              'form',
              '.checkout-form',
              '.order-form',
              '.cart-form'
            ];
            
            let formFound = false;
            for (const selector of formSelectors) {
              const form = page.locator(selector);
              if (await form.count() > 0 && await form.first().isVisible()) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞: ${selector}`);
                formFound = true;
                break;
              }
            }
            
            if (formFound) {
              console.log('üéâ –£—Å–ø–µ—à–Ω–æ! –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ');
            } else {
              console.log('‚ö†Ô∏è –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
          } else {
            console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }
        } else {
          console.log('‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      } else {
        console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞');
    }
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ', async ({ page }) => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞
    await page.goto('https://prokoleso.ua/ua/checkout/');
    await page.waitForTimeout(3000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    const cartEmpty = page.locator('text=–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, text=–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    const isEmpty = await cartEmpty.count() > 0 && await cartEmpty.first().isVisible();
    
    if (isEmpty) {
      console.log('üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã...');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
      await page.goto('https://prokoleso.ua/ua/shiny/');
      await page.waitForLoadState('networkidle');
      
      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
      const firstProduct = page.locator('a[href*="/product/"], .product-item a, .product-card a').first();
      
      if (await firstProduct.count() > 0) {
        await firstProduct.click();
        await page.waitForLoadState('networkidle');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        const addButton = page.locator('button:has-text("–î–æ–¥–∞—Ç–∏"), button:has-text("–ö—É–ø–∏—Ç–∏"), .add-to-cart, .btn-cart').first();
        
        if (await addButton.count() > 0 && await addButton.isVisible()) {
          await addButton.click();
          await page.waitForTimeout(2000);
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
          await page.goto('https://prokoleso.ua/ua/checkout/');
          await page.waitForTimeout(3000);
        }
      }
    }
    
    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞...');
    
    const fieldSelectors = {
      '–ò–º—è': [
        'input[name*="name"]',
        'input[placeholder*="—ñ–º\'—è"]',
        'input[placeholder*="–∏–º—è"]',
        'input[placeholder*="–Ü–º\'—è"]',
        'input[placeholder*="–ò–º—è"]'
      ],
      '–§–∞–º–∏–ª–∏—è': [
        'input[name*="surname"]',
        'input[name*="lastname"]',
        'input[placeholder*="–ø—Ä—ñ–∑–≤–∏—â–µ"]',
        'input[placeholder*="—Ñ–∞–º–∏–ª–∏—è"]'
      ],
      '–¢–µ–ª–µ—Ñ–æ–Ω': [
        'input[name*="phone"]',
        'input[type="tel"]',
        'input[placeholder*="—Ç–µ–ª–µ—Ñ–æ–Ω"]',
        'input[placeholder*="–¢–µ–ª–µ—Ñ–æ–Ω"]'
      ],
      'Email': [
        'input[name*="email"]',
        'input[type="email"]',
        'input[placeholder*="email"]',
        'input[placeholder*="Email"]'
      ],
      '–ì–æ—Ä–æ–¥': [
        'input[name*="city"]',
        'select[name*="city"]',
        'input[placeholder*="–º—ñ—Å—Ç–æ"]',
        'input[placeholder*="–≥–æ—Ä–æ–¥"]'
      ],
      '–ê–¥—Ä–µ—Å': [
        'input[name*="address"]',
        'textarea[name*="address"]',
        'input[placeholder*="–∞–¥—Ä–µ—Å–∞"]',
        'input[placeholder*="–∞–¥—Ä–µ—Å"]'
      ]
    };
    
    let foundFields = 0;
    
    for (const [fieldName, selectors] of Object.entries(fieldSelectors)) {
      let fieldFound = false;
      
      for (const selector of selectors) {
        const element = page.locator(selector);
        if (await element.count() > 0 && await element.first().isVisible()) {
          console.log(`‚úÖ –ü–æ–ª–µ "${fieldName}" –Ω–∞–π–¥–µ–Ω–æ: ${selector}`);
          fieldFound = true;
          foundFields++;
          break;
        }
      }
      
      if (!fieldFound) {
        console.log(`‚ö†Ô∏è –ü–æ–ª–µ "${fieldName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: ${foundFields} –∏–∑ ${Object.keys(fieldSelectors).length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const submitSelectors = [
      'button[type="submit"]',
      'input[type="submit"]',
      '.submit-btn',
      '.order-btn',
      'button:has-text("–∑–∞–∫–∞–∑")',
      'button:has-text("–æ—Ñ–æ—Ä–º–∏—Ç—å")'
    ];
    
    let submitButton = null;
    for (const selector of submitSelectors) {
      const button = page.locator(selector);
      if (await button.count() > 0 && await button.first().isVisible()) {
        submitButton = button.first();
        console.log(`üîò –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${selector}`);
        break;
      }
    }
    
    if (submitButton) {
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  });

  test('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async ({ page }) => {
    console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞
    await page.goto('https://prokoleso.ua/ua/checkout/');
    await page.waitForTimeout(3000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞
    const form = page.locator('form').first();
    if (await form.count() === 0) {
      console.log('‚ö†Ô∏è –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
      return;
    }
    
    const testData = {
      name: '–¢–µ—Å—Ç',
      surname: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      phone: '+380671234567',
      email: 'test@example.com',
      city: '–ö–∏–µ–≤',
      address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1'
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è
    const fillField = async (selectors: string[], value: string, fieldName: string) => {
      for (const selector of selectors) {
        const element = page.locator(selector);
        if (await element.count() > 0 && await element.first().isVisible()) {
          await element.first().fill(value);
          console.log(`‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "${fieldName}": ${value}`);
          return true;
        }
      }
      console.log(`‚ö†Ô∏è –ü–æ–ª–µ "${fieldName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return false;
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
    await fillField(['input[name*="name"]', 'input[placeholder*="—ñ–º\'—è"]'], testData.name, '–ò–º—è');
    await fillField(['input[name*="surname"]', 'input[name*="lastname"]'], testData.surname, '–§–∞–º–∏–ª–∏—è');
    await fillField(['input[name*="phone"]', 'input[type="tel"]'], testData.phone, '–¢–µ–ª–µ—Ñ–æ–Ω');
    await fillField(['input[name*="email"]', 'input[type="email"]'], testData.email, 'Email');
    await fillField(['input[name*="city"]', 'select[name*="city"]'], testData.city, '–ì–æ—Ä–æ–¥');
    await fillField(['input[name*="address"]', 'textarea[name*="address"]'], testData.address, '–ê–¥—Ä–µ—Å');
    
    console.log('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã', async ({ page }) => {
    console.log('üöö –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã...');
    
    await page.goto('https://prokoleso.ua/ua/checkout/');
    await page.waitForTimeout(3000);
    
    // –ò—â–µ–º –±–ª–æ–∫–∏ —Å –æ–ø—Ü–∏—è–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã
    const deliverySection = page.locator('[class*="delivery"], [class*="shipping"], .delivery-methods');
    const paymentSection = page.locator('[class*="payment"], [class*="pay"], .payment-methods');
    
    if (await deliverySection.count() > 0) {
      console.log('üöö –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏');
      
      const deliveryOptions = deliverySection.locator('input[type="radio"], .delivery-option');
      const optionCount = await deliveryOptions.count();
      
      if (optionCount > 0) {
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏: ${optionCount}`);
        
        for (let i = 0; i < Math.min(3, optionCount); i++) {
          const option = deliveryOptions.nth(i);
          const optionText = await option.textContent();
          if (optionText && optionText.trim()) {
            console.log(`  - ${optionText.trim()}`);
          }
        }
      }
    } else {
      console.log('‚ö†Ô∏è –ë–ª–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (await paymentSection.count() > 0) {
      console.log('üí≥ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã');
      
      const paymentOptions = paymentSection.locator('input[type="radio"], .payment-option');
      const optionCount = await paymentOptions.count();
      
      if (optionCount > 0) {
        console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: ${optionCount}`);
        
        for (let i = 0; i < Math.min(3, optionCount); i++) {
          const option = paymentOptions.nth(i);
          const optionText = await option.textContent();
          if (optionText && optionText.trim()) {
            console.log(`  - ${optionText.trim()}`);
          }
        }
      }
    } else {
      console.log('‚ö†Ô∏è –ë–ª–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  });
});
